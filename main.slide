It's not illegal to cook infrastructure
aka. How not to break things bad!
11:00 28 Apr 2018
Tags: Go, AWS, Furnace

Gergely Br√§utigam
Cloud Engineer, Cheppers
https://skarlso.github.io
@Skarlso

* Agenda

- Introductions....................[#2][2]
- Bad Infrastructure...............[#2][2]
- How Not To Cook..................[][]
- AWS..............................[#4][4]
- CloudFormations..................[][]
- Furnace..........................[][]
- Why not use X....................[][]

* Introduction

* Bad Infrastructure

* Common Patterns

- Un-reproducable
- Fragile
- Difficult to maintaine
- Has leprechauns (hand made changes)
- Too many "Why is this here? What does it do?" moments

* How Not To Cook

* Gordon Ramsay would be sad

- Using various recipes ( have puppet and chef and ansible at the same time )
- Overcook ( you infrastructure code is too complicated )
- Though, that's how pizza was made ( have bread and flavour it with whatever you can find )
- ...

* AWS

* How to mis-use AWS

* Bad

- Having a single, monolith EC2 instance with
- No VPC
- No Security Groups
- No Configuration management to manage it

Might as well stick to Linode / Digital Ocean at that point.

* Better

- Still, single EC2, but it's managed by a configuration management system
- Ansible, Chef, Puppet, Salt...
- But...
- No VPC
- No Security Groups
- No real single view of how many components there are

* Good

- Security Groups and VPC applied
- Optionally: LoadBalancers, Autoscaling Groups
- Things are composed through some kind of configuration management
- Still... Things might be hand crafted / created. For example: Security groups, IAMs, VPCs or other AWS resources

* Perfection

.image imgs/so_good.png

* CloudFormation

.link CloudFormation https://aws.amazon.com/cloudformation/

* Managing CloudFormation stacks - Furnace

.link Furnace https://github.com/Skarlso/go-furnace

TODO: insert some ikea graphics.
- Configuring a Stack..............[][]
- Using Multiple Furnace files.....[][]

* Why not use X

- Terraform
- Too much baggage
- Different usage structure
